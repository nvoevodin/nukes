{"version":3,"sources":["components/Counter.module.css","components/counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","state","feed","country","latitude","longitude","date_long","name","region","all","viewport","zoom","arr","info","fetch","then","res1","json","setState","data","this","Object","entries","aggr","map","i","aggr1","push","_renderObject","pop","_renderObject1","console","log","className","Toast","classes","Lgroup","ToastHeader","style","backgroundColor","ToastBody","fontSize","opacity","width","height","mapStyle","mapboxApiAccessToken","process","onViewportChange","circleBase","Button","color","float","marginRight","marginBottom","borderRadius","onClick","arra","bind","marginLeft","arra1","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9094492.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circleBase\":\"Counter_circleBase__3ZGI9\",\"Lgroup\":\"Counter_Lgroup__1qR8R\"};","import React, { Component } from 'react';\nimport ReactMapGL, {Marker} from 'react-map-gl';\nimport classes from './Counter.module.css'\nimport {Button,Toast, ToastBody, ToastHeader } from 'reactstrap';\n\nclass Counter extends Component {\n    state = {\n feed:[{country: \"USA\", latitude: 32.54, longitude: -105.57, date_long: 19450716,name: \"TRINITY\",\n region: \"ALAMOGORDO\"}],\n\n        all:0,\n        viewport: {\n\n          latitude: 37.7577,\n          longitude: -122.4376,\n          zoom:1\n        },\n        arr:[[0,0]],\n        info:[]\n    \n        }\n\n        componentDidMount(){\n            \n           \n              fetch('http://18.191.231.245:4000/nukes')\n\n            \n            .then(res1 => res1.json())\n            .then(res1 => this.setState({feed:res1.data}));\n\n            // this.interval = setInterval(() => this.setState({ all: this.state.all + 1 }), 1000);\n         \n        }\n\n    \n\n    aggr1(){\n      if (this.state.all >0){\n        this.setState({\n          all: this.state.all-1\n      })\n      } else {}\n      //console.log(this.state.feed[this.state.all])\n      return(this.state.feed[this.state.all])\n    }\n\n        aggr(){\n          this.setState({\n            all: this.state.all+1\n        })\n          //console.log(this.state.feed[this.state.all])\n          return(this.state.feed[this.state.all])\n        }\n    \n      \n            \n        _renderObject(){\n          return Object.entries(this.aggr()).map(([key,value], i) => {\n            return (\n              \n                value\n                 \n            )\n          })\n        };   \n        \n        _renderObject1(){\n          return Object.entries(this.aggr1()).map(([key,value], i) => {\n            return (\n              \n                value\n                 \n            )\n          })\n        }; \n        \n\n        arra(){\n         return (this.state.arr.push([this._renderObject()[1],this._renderObject()[2]])\n         ),\n         this.setState({viewport: {latitude:this._renderObject()[1],longitude:this._renderObject()[2],zoom:1},\n         info: [this._renderObject()] })\n         \n        }\n\n        arra1(){\n          return (this.state.arr.pop([this._renderObject1()[1],this._renderObject1()[2]])\n          ),\n          this.setState({viewport: {latitude:this._renderObject1()[1],longitude:this._renderObject1()[2],zoom:1},\n          info: [this._renderObject1()] })\n          \n         }\n\n\n\n        \n\n  render() {\n  \nconsole.log(this.state.info)\n    \n    return (\n\n        <div>\n\n<div className=\"fixed-top\">\n        <Toast className={classes.Lgroup}>\n          <ToastHeader style ={{backgroundColor: 'yellow'}}>\n            Explosion Info\n          </ToastHeader>\n          {this.state.info.map((i) => \n          <ToastBody style ={{fontSize: '9px', opacity: 0.7}}>\n            <p>Country: {i[0]}</p>\n            <p>Lat: {i[1]}</p>\n            <p>Lon: {i[2]}</p>\n            <p>Date: {i[3]}</p>\n            <p>Bomb Name: {i[4]}</p>\n            <p>Region: {i[5]}</p>\n          </ToastBody>\n\n)}\n        </Toast>\n      </div>\n          \n  \n              <ReactMapGL\n              {...this.state.viewport}\n              width=\"100vw\" // It always override the view(viewport) width state.\n              height=\"100vh\" // It always override the view(viewport) height state.\n              mapStyle=\"mapbox://styles/mapbox/dark-v8\"\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            onViewportChange={(viewport) => this.setState({viewport})}\n           \n            >\n       \n  { this.state.arr.map(i =>\n              <Marker latitude={i[0]} longitude={i[1]}>\n              <div className={classes.circleBase}></div>\n             </Marker>\n  )\n\n  }\n\n        \n        \n            </ReactMapGL>\n            <div className=\"fixed-bottom\">\n      <Button color = 'success' \n      style = {{width:\"85px\",height:\"85px\", float: 'right',marginRight: '15px', marginBottom: '15px',borderRadius: '50%',fontSize:'35px'}} onClick={this.arra.bind(this)}>+\n      </Button>\n      <Button color = 'danger' \n      style = {{width:\"85px\",height:\"85px\", float: 'left',marginLeft: '15px', marginBottom: '15px',borderRadius: '50%',fontSize:'35px'}} onClick={this.arra1.bind(this)}>-\n      </Button>\n      </div>\n\n      {/* <div className=\"fixed-top\">\n      <Button color = 'success' \n      style = {{width:\"85px\",height:\"85px\", float: 'right',marginRight: '15px', marginBottom: '15px',borderRadius: '50%',fontSize:'35px'}} onClick={this.arra.bind(this)}>+1\n      </Button>\n      </div> */}\n\n            </div>\n\n\n\n\n    );\n  }\n}\nexport default Counter","import React from 'react';\nimport Counter from './components/counter'\nimport {Row } from 'reactstrap';\n\n\n\nfunction App() {\n  return (\n    <div>\n \n     \n      <Counter/>\n  \n     \n  \n      \n   \n\n\n    </div>\n      \n      \n\n    \n    \n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}